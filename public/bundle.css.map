{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../src/App.svelte",
    "../src/Tabs.svelte",
    "../src/JsonView.svelte",
    "../src/List.svelte",
    "../src/Dialog.svelte",
    "../src/schemer/schemer.svelte",
    "../src/Type.svelte",
    "../src/Func.svelte",
    "../src/TypeField.svelte",
    "../src/Argument.svelte"
  ],
  "sourcesContent": [
    "<script>\n// import { afterUpdate, onMount } from 'svelte'\nimport { afterUpdate } from 'svelte'\n\nimport Schemer from \"./schemer/schemer.svelte\";\nimport JsonView from \"./JsonView.svelte\"\nimport List from \"./List.svelte\"\n\n\nexport let parentid ='tab1'\nexport let visible = true\n\nexport let url =''\n\nlet urlElement\nlet credentialsElement\nlet schemerElement\n\nlet scheme = {}\n// let ignoreChanges = true\nlet doTests\n// let noscheme = true\nlet mainArea\n\nlet controls\n\n\n$: if (urlElement) {\n    console.log(\"url=\", url)\n    urlElement.value = url\n}\n\n// $: {\n//     scheme = scheme\n//     // noscheme = Object.entries(scheme).length == 0\n//     console.log('App scheme changed', scheme)\n//     // ignoreChanges= true\n//     // delay(restoreInputs, 500)\n// }\n\nfunction doAllTests() {\n    doTests()\n}\n\n\nfunction getControlValuesByTagName(tag) {\n    let a =[]\n    if (!mainArea){\n        return a\n    }\n    let inps=mainArea.getElementsByTagName(tag)  \n    for (let inp of inps) {\n        let id = inp.getAttribute(\"id\")\n        if (!id) continue\n        if (id[0]=='-') console.log(id) // check wrong ids\n        let type =  tag == 'textarea' ? 'textarea' :  inp.getAttribute(\"type\")\n        let value = inp.value\n        let checked = inp.checked\n        a.push({ id: id, type:type, checked:checked, value:value })\n    }\n    return a    \n}\n\n\nfunction getControlValues() {\n    let inputs    = getControlValuesByTagName(\"input\")\n    let textareas = getControlValuesByTagName(\"textarea\")\n    return inputs.concat(textareas)\n}\n\n\nfunction restoreControlValues() {\n    if (!controls) return\n    let restored = 0\n    for (let c of controls) {\n        let inp = document.getElementById(c.id)\n        if (!inp) {\n            // console.log(\"No input:\")\n            continue\n        }\n        restored ++\n        if (c.type == 'checkbox') {\n            inp.checked = c.checked\n        } else {\n            inp.value = c.value\n        }\n    }\n    console.log(restored, \"condrols have been restored.\")\n}\n\n\nfunction clearStorageItemScheme(){\n    localStorage.removeItem(parentid)\n    console.log('App: clearStorageItemScheme: ', parentid)\n}\n\nexport function reloadSchema() {\n    schemerElement.getSchema()\n}\n\nexport function saveInputs() {\n    let key = parentid\n    let controls = getControlValues()\n    if (!controls || controls.length==0){\n        console.log(\"No controls\")\n        return\n    }\n    let value = { \n        url: urlElement.value,\n        credentials: credentialsElement.checked,\n        controls:controls,\n        scheme:scheme\n        }\n    let controlsStr = JSON.stringify(value)\n    localStorage.setItem(key, controlsStr);\n    console.log(\"saved: \", key, controlsStr.length )\n}\n\n\nexport function restoreInputs() {\n\n    let key = parentid\n    let controlsStr = localStorage.getItem(key)\n    if (!controlsStr) return\n    let value = JSON.parse(controlsStr)\n    urlElement.value = value.url\n    credentialsElement.checked = value.credentials\n    scheme = value.scheme\n    console.log(\"restored tab=\", key, controlsStr.length )\n\n    controls = value.controls\n}\n\n\nafterUpdate(() => {\n    console.log(\"afterUpdate parentid=\", parentid)\n    restoreInputs()\n    setTimeout(restoreControlValues, 0)\n});\n\n\n</script>\n\n<style>\n    .root {\n        padding-top:20px;\n        margin-left: 20px;\n        margin-right:20px;\n    }\n    input {\n        font-size: 100%;\n    }\n\n    .button {\n        color: #E10098; \n        background-color: transparent;\n        border: 1px solid #E10098;\n        padding: 5px 15px 5px 15px;\n        border-radius: 4px;\n        height: 32px;\n\n        font-family: 'Roboto Condensed';\n        font-size: 80%;\n        font-weight: bold;\n        \n        letter-spacing: 0.1em;\n        text-transform: uppercase;\n    }\n\n    .row {\n        /* border: 1px solid red; */\n        display: grid;\n        grid-template-columns:  1fr auto;\n        justify-content: left;\n        align-items: flex-start;\n        column-gap: 10px;\n    }\n\n    .smaller {\n        opacity: 0.5;\n        font-size: 80%;\n        letter-spacing: 0.05em;\n    }\n\n    .hidden {display: none;}\n    .visible {display: block;}\n\n</style>\n\n<div class=\"hidden\" class:visible>\n    <div class=\"root\" >\n        <div class=\"smaller\">Enter GraphQL endpoint. For example https://yoursite.com/graphql</div>\n        <div class=\"row\">\n            <Schemer parentid=\"{parentid}-Schemer\" bind:this={schemerElement} bind:credentialsElement={credentialsElement} bind:urlElement={urlElement}  bind:scheme={scheme} on:clear={clearStorageItemScheme} />\n            <input type=\"button\" class=\"button\" on:click={doAllTests} value=\"run all tests\" >\n        </div>\n        <div class=\"main\" bind:this={mainArea}>\n            <List parentid=\"{parentid}-List\" credentialsElement={credentialsElement}  urlElement={urlElement} scheme={scheme} bind:doTests={doTests} />\n        </div>\n    </div>\n</div>\n\n",
    "<script>\nimport {createEventDispatcher,onMount} from 'svelte'\nimport Dialog from './Dialog.svelte'\n\nexport let tabs = []\nexport let active \nlet dialog\n\nconst dispatch = createEventDispatcher()\n\n// let defaultTab = {\n//     tabName: \"auth-proxy\",\n//     url:\"https://auth-proxy.rg.ru/schema\",\n//     scheme: null\n// }\n\n\nfunction activate(e) {\n    let tabName = this.getAttribute(\"data-tabName\")\n    active = tabs.find( t => t.tabName == tabName )\n}\n\nfunction getTabsFromLocalStorage() {\n    let tabs =[]\n    let keys = Object.keys(localStorage)\n    keys.sort()\n    for (let key of keys) {\n        let str = localStorage.getItem(key)\n        if (!str) continue\n        let value = JSON.parse(str)\n        // make a copy of string\n        tabs.push( \n            {\n                tabName:key,\n                url:(' ' + value.url).slice(1),\n                scheme:value.scheme\n            })\n    }\n    return tabs\n}\n\nexport function addNewTab(tabName, url) {\n    let newTab = {tabName: tabName, url:url}\n    tabs = [...tabs, newTab]\n    active = newTab\n    dispatch('save', {tab: active} )\n}\n\nfunction addTab(){\n    dialog.showDialog(\"Enter a new tab name\",\"new\", onAddTabOk)\n}\n\nfunction onAddTabOk(tabName){\n    if (!tabName) return\n    if (tabs.some( tab =>  tabName == tab.tabName )){\n        dialog.showDialog(`\"${tabName}\" already exists. Please try again.`,tabName, onAddTabOk)\n        return\n    }\n    addNewTab(tabName, 'https://auth-proxy.rg.ru/graphql')\n}\n\n\n\nexport function setActiveTabByName(name) {\n    let ind = tabs.findIndex( t => t.tabName == name )\n    if (ind == -1) {\n        return\n    }\n    active = tabs[ind]\n}\n\n\nfunction deleteTabByName(tabName) {\n    let tabData = localStorage.getItem(tabName)\n    localStorage.removeItem(tabName)\n    tabs = tabs.filter( t => t.tabName != tabName)\n    active = tabs.length >0 ? tabs[0] : null\n    return tabData\n}\n\nfunction deleteTab(){\n    let tabName = this.getAttribute(\"data-tabName\")\n    deleteTabByName(tabName)\n}\n\n// fixLocalStorageData renames ids by chnaging tabName to newTabName\nfunction fixLocalStorageData(controlsStr, tabName, newTabName) {\n    if (!controlsStr) return controlsStr\n    let val = JSON.parse(controlsStr)\n    if (!val) return controlsStr\n    if (!val.controls) return controlsStr\n\n    for (let c of val.controls) {\n        c.id = c.id.replace(tabName, newTabName)\n    }\n    // console.log(controls)\n\n    return JSON.stringify(val)\n}\n\nfunction exportTab() {\n    let tabName = this.parentElement.parentElement.getAttribute(\"data-tabName\")\n    let fileContent = localStorage.getItem(tabName)\n\n    // save tab name into data\n    let data = JSON.parse(fileContent)\n    data.tabName = tabName\n    let modifiedFileContent = JSON.stringify(data)\n\n\n    // var fileContent = JSON.stringify(active);\n    var bb = new Blob([modifiedFileContent], { type: 'text/plain' });\n    var a = document.createElement('a');\n    a.download = active.tabName+'.json';\n    a.href = window.URL.createObjectURL(bb);\n    a.click();    \n}\n\nfunction importTab(){\n    document.getElementById('fileChooser').click()\n}\n\n\nfunction openFile(event) {\n    var input = event.target;\n    var reader = new FileReader();\n    reader.onload = function(){\n        importTabFromData(reader.result)\n    }\n    reader.readAsText(input.files[0])\n}\n\n// importTabFromData creates a tab from erlier exported data\nfunction importTabFromData(text) {\n    if (!text) \n        return\n    var newTab = JSON.parse(text)\n    if (!newTab)\n        return\n    var tabName = newTab.tabName\n    if (!tabName) \n        return\n\n    // save imported tab\n    localStorage.setItem(tabName,text)\n    \n    // restore tabs from local storage\n    let storedTabs = getTabsFromLocalStorage()\n    // tabs = storedTabs.length ==0 ? [defaultTab] : storedTabs\n    tabs = storedTabs\n    active = newTab\n}\n\n\nfunction renameTab(){\n    // create a new tab\n    let tabName = active.tabName\n    let tabUrl = active.url\n    let tabScheme = active.scheme\n\n    let newTabName = tabName\n    // while (tabs.includes(newTabName)){\n    while (tabs.some( tab =>  newTabName == tab.tabName )){\n        newTabName = prompt(`Rename \"${newTabName}\"`,newTabName)\n        if (!newTabName) return\n    }\n\n    // delete old tab\n    let data = deleteTabByName(tabName)\n\n   // add the new tab to UI, and activate it\n    if (!newTabName) return\n    let newTab = {\n        tabName:newTabName,\n        url:tabUrl,\n        scheme: tabScheme\n    }\n    tabs = [...tabs, newTab]\n    active = newTab\n\n    // move data \n    if (data){\n        // it's not enough to save the old data by the new key,\n        // We need to fix all ids.\n        let fixedData = fixLocalStorageData(data, tabName, newTabName)\n        localStorage.setItem(newTabName,fixedData)\n    }\n}\n\n\nonMount(async () => {\n    let storedTabs = getTabsFromLocalStorage()\n    tabs = storedTabs.length ==0 ? [] : storedTabs\n    active = tabs[0]\n    dispatch('mounted')\n})\n\n\n</script>\n\n<style>\n    .container {\n        font-size: 14px;\n        padding: 25px 0 0 20px;\n        /* background-color: whitesmoke; */\n        /* background-color: black; */\n        background-image: linear-gradient(to right, whitesmoke, transparent, transparent);\n        border-bottom:1px solid silver;\n        border-image-source: linear-gradient(to right, silver, transparent);\n        border-image-slice: 1;\n        margin-bottom:30px;\n    }\n\n\n    .tab {\n        margin: 0;\n        display: inline-block;\n        padding: 2px 4px 2px 20px;\n        cursor: default;\n    \n        /* color: steelblue; */\n        color: gray;\n        border-radius: 3px 3px 0 0;\n        border:1px solid transparent;\n        border-top-width: 2px;\n\n        top: 1px;\n        position: relative;\n    }\n\n    .tab:hover .x {\n        visibility: visible;\n    }\n\n\n    .active {\n        background-color: white;\n        border:1px solid silver;\n        border-top-width: 2px;\n        border-bottom: 1px solid white;        \n        border-top-color: #E10098;\n        color: black;\n        }\n\n\n    .active:hover .tabmenu {\n        opacity: 1.0;\n    }\n\n\n    .active .x {\n        color: #E10098;\n        visibility: visible;\n    }\n\n    .x {\n        padding:0 3px 0 3px;\n        /* font-size: 90%; */\n        margin-left:3px;\n        color: gray;\n        visibility: hidden;\n    }\n    .x:hover {\n        color: #E10098;\n    }\n\n    .button-tiny {\n        padding: 0 3px 0 3px;\n        border: 1px solid transparent;\n        border-radius: 4px;\n        background-color: transparent;\n        color: #E10098;\n        cursor: pointer;\n        border-radius: 20px;\n    }\n    .button-tiny:hover {\n        border: 1px solid #E10098;\n    }\n\n    .tabmenu {\n        position: absolute;\n        top: 25px;\n        width: 100%;\n        left:0;\n        text-align: center;\n        display:none;\n        word-wrap: none;\n        white-space: nowrap;\n        opacity: 0.0;\n        transition: 0.3s;\n        padding-top:6px;\n    }\n    .active .tabmenu {\n        display: block;\n    }\n\n</style>\n\n<div class=\"container\">\n    <Dialog bind:this={dialog}></Dialog>\n    {#each tabs as tab (tab.tabName)}\n        <span class=\"tab\" class:active={tab.tabName == active.tabName} data-tabName={tab.tabName} on:click={activate}>{tab.tabName} \n            <span class=\"x\" title=\"delete {tab.tabName} tab\" data-tabName={tab.tabName} on:click={deleteTab}>&#xd7;</span>\n            <div class=\"tabmenu\">\n                <input type=\"button\" class=\"button-tiny\" title=\"Rename {active.tabName} tab\" value=\"rename\" on:click={renameTab}>\n                <input type=\"button\" class=\"button-tiny\" title=\"Save {active.tabName} to a file\" value=\"export\" on:click={exportTab}>\n                <!-- &#8628; -->\n            </div>\n        </span>\n    {/each}\n\n    <span title=\"Add a new tab\" class=\"button-tiny\" style=\"font-weight:bold;\" on:click={addTab}>&nbsp;&nbsp;&nbsp; &#xFF0B; &nbsp;&nbsp;&nbsp;</span>\n    <span title=\"Import tab from a file\" class=\"button-tiny\" on:click={importTab}>import</span>\n    <!-- &#8624; -->\n    <input id=\"fileChooser\" type='file' style=\"display:none\" on:change={openFile} >\n</div> \n<!-- &#x21ca; &#x21c8; &#x2297;  -->",
    "\n<script>\n\nexport let json\n\nlet elem\n\n$: try {\n        window.$(elem).jsonViewer(json, { collapsed: true, rootCollapsable: false })\n    } catch (error) {}\n\n\n</script>\n\n<style>\n.self {\n    border: 1px solid silver;\n    background-color: whitesmoke;\n}\n</style>\n\n\n\n<div class=\"self\" bind:this={elem}></div>\n\n",
    "<script>\nimport Func from './Func.svelte'\nimport Type from './Type.svelte'\n\nexport let scheme \n// export let url \nexport let urlElement\nexport let credentialsElement\n\nexport let parentid = ''\n\nexport let doTests = function (){\n    for (let [key,f] of Object.entries(testFunctions) )  f()\n}\n\n\nlet mutations =[]\nlet queries =[]\nlet types=[]\nlet usertypes=[]\nlet noscheme = true\nlet testFunctions = {}\n\n\n$: {\n    // console.log(\"List scheme changed\")\n    mutations =[]\n    queries =[]\n    types=[]\n    usertypes=[]\n\n    try {\n    noscheme = Object.entries(scheme).length == 0\n    mutations = scheme.data.__schema.mutationType.fields\n    queries = scheme.data.__schema.queryType.fields\n    types = scheme.data.__schema.types.sort(compareTypes)\n    usertypes = scheme.data.__schema.types.filter(t => t.name[0]!='_' && t.kind == 'OBJECT' && t.name != 'Query' && t.name != 'Mutation').sort(compareTypes)\n    } catch(e){}\n}\n\n\nfunction compareTypes(t1, t2) {     \n     if (t1.name > t2.name ){\n          return 1\n     } else if (t1.name < t2.name) {\n          return -1\n     } \n     return 0\n}\n\n\n\n</script>\n\n<style>\n    .noscheme {display: none;}\n</style>\n\n<div class:noscheme>\n     <!-- <input type=\"button\" value=\"test\" on:click={doTests}> -->\n     <h4>Queries</h4>\n     {#each queries as e (e.name)}\n          <div>\n          <Func credentialsElement={credentialsElement} urlElement={urlElement} bind:test={testFunctions[e.name]} node={e} operation=\"query\"  scheme={scheme} parentid=\"{parentid}-query\" />\n          <!-- bind:test={e.test} -->\n          <!-- on:change -->\n          <!-- url={url} -->\n          </div>\n     {/each}\n\n     <h4>Mutations</h4>\n     {#each mutations as e (e.name)}\n          <div>\n          <Func credentialsElement={credentialsElement} urlElement={urlElement} bind:test={testFunctions[e.name]} node={e}  operation=\"mutation\" scheme={scheme} parentid=\"{parentid}-mutation\" />\n          <!-- bind:test={e.test} -->\n          <!-- on:change -->\n          <!-- url={url} -->\n          </div>\n     {/each}\n\n     <h4>User types</h4>\n     {#each usertypes as t}\n          <div>\n          <Type showCheckbox={false} typeName={t.name} scheme={scheme} parentid=\"{parentid}-usertypes\"/>\n          </div>\n     {/each}\n\n     <!-- \n     <h4>All types</h4>\n     {#each types as t}\n          <div>\n          <Type typeName={t.name}  scheme={scheme}/>\n          </div>\n     {/each}\n     -->\n</div>",
    "<script>\n\nlet hidden = true\nlet message \nlet input \nlet callback = null\n\nexport function showDialog(text, value, callbackFunc) {\n    callback = callbackFunc\n    message.innerText = text\n    input.value = value\n    hidden = false\n    setTimeout(()=>input.focus())\n}\n\n\nexport function hideDialog(){\n    hidden = true\n}\n\nfunction okPressed() {\n    hideDialog()\n    if (typeof callback == 'function')\n        callback(input.value)\n}\n\nfunction onkeyup(event) {\n    console.log(event.keyCode)\n    if (event.keyCode === 13) {\n        event.preventDefault()\n        okPressed()\n    } else if (event.keyCode === 27) {\n        event.preventDefault()\n        hideDialog()\n    }\n\n}\n\n</script>\n\n<style>\n    /* The Modal (background) */\n    .modal {\n        position: fixed; /* Stay in place */\n        z-index: 100; /* Sit on top */\n        /* padding-top: 1px;  */\n        left: 0;\n        top: 0;\n        width: 100%; /* Full width */\n        height: 100%; /* Full height */\n        overflow: auto; /* Enable scroll if needed */\n        background-color: rgb(0,0,0); /* Fallback color */\n        background-color: rgba(0,0,0,0.1); /* Black w/ opacity */\n    }\n\n    /* Modal Content */\n    .modal-content {\n        position: relative;\n        background-color: #fefefe;\n        margin: auto;\n        width: 100%;\n        max-width: 500px;\n        box-shadow: 0px 10px 50px rgba(0, 0, 0, 0.356);\n    }\n\n\n    /* The Close Button */\n    .close {\n        color: #aaaaaa;\n        position: absolute;\n        top:0px;\n        right:10px;;\n        font-size: 28px;\n        font-weight: bold;\n        margin:0;\n        padding:0;\n    }\n\n    .close:hover,\n    .close:focus {\n        color: #000;\n        text-decoration: none;\n        cursor: pointer;\n    }\n    .input-row {\n        margin-left:20px;\n        margin-right:20px;\n    }\n    .input {\n        width: 100%;\n    }\n    .buttons {\n        margin:20px;\n        margin-bottom:0;\n        padding-bottom:20px;\n        text-align: right;\n    }\n    .buttons button {\n        width: 100px;\n    }\n\n    .message {\n        margin-left:20px;\n        margin-right:20px;\n        margin-bottom:20px;\n        padding-top:15px;\n    }\n\n    .hidden {\n        display: none;\n    }\n\n</style>\n\n\n<!-- The Modal -->\n<div class=\"modal\" class:hidden on:click={hideDialog}>\n\n  <!-- Modal content -->\n  <div class=\"modal-content\" onclick=\"event.stopPropagation()\">\n    <div class=\"close\" on:click={hideDialog}>&times;</div>\n    \n    <div class=\"message\" bind:this={message}></div>\n    <div class=\"input-row\">\n        <input class=\"input\" bind:this={input} value=\"\" on:keyup={onkeyup}><br>\n    </div>\n    <div class=\"buttons\">\n        <button on:click={hideDialog}>Cancel</button>\n        <button on:click={okPressed}>Ok</button>    \n    </div>\n    \n  </div>\n\n</div>",
    "<script>\n\nimport { createEventDispatcher } from 'svelte'\nimport { queryString } from \"./schemer.js\"\nimport JsonView from '../JsonView.svelte'\n\nexport let url = \"\"\nexport let scheme = {}\nexport let parentid =''\nexport let urlElement \nexport let credentialsElement \n\nlet errorsElement\nlet submitElement\nlet visible = false\n\n\nconst dispatch = createEventDispatcher()\n\n\nexport async function getSchema() {\n    errorsElement.innerText = ''\n    submitElement.classList.add(\"inprogress\");\n    // clearSchema()\n    // // scheme = {}    \n    try {\n\n        // var ajaxOptions = {\n        //     url: urlElement.value, \n        //     type: \"POST\", \n        //     xhrFields : { withCredentials: credentialsElement.checked} ,\n        //     data: { query:queryString, variables: '{}'},\n        // }\n        // scheme =  await jQuery.ajax(ajaxOptions)\n    \n\n        let fetchOptions = {\n            headers: {\n            'Accept': 'application/json, text/plain, */*',\n            'Content-Type': 'application/json'\n            },\n            method: \"POST\",  \n            body: JSON.stringify({ query: queryString, variables: {}, operationName: \"IntrospectionQuery\" }) \n        }\n        if (credentialsElement.checked){\n            console.log(\"Sending with credentials included = \", credentialsElement.checked)\n            fetchOptions.credentials = 'include' \n        }\n        let resp = await fetch( urlElement.value, fetchOptions )\n        let newScheme = await resp.json()\n        clearSchema()\n        scheme = newScheme \n\n    } catch (err) {\n        console.error(\"get scheme error:\", err)\n        errorsElement.innerText = \"get scheme error:\" + err\n    }\n    submitElement.classList.remove(\"inprogress\");\n}\n\nfunction clearSchema() {\n    dispatch('clear', { text: 'clear storage' })\n    console.log('Schemer: clearSchema:', parentid)\n}\n\n\n</script>\n\n<style>\n:global(.inprogress) {\n    background-color: rgba(225, 0, 154, 0.13) !important;\n}\n\n    .text {\n        width: 100%;\n        font-size: 100%;\n        padding:1px 10px;\n        border-radius: 4px 0 0 4px;\n        border: 1px solid silver;\n        height: 28px;\n    }\n    .button {\n        color: #E10098; \n        background-color: transparent;\n        border: 1px solid #E10098;\n        padding: 5px 15px 5px 15px;\n        border-radius: 0 4px 4px 0;\n        height: 32px;\n\n        font-family: 'Roboto Condensed';\n        font-size: 13px;\n        font-weight: bold;\n        \n        letter-spacing: 0.1em;\n        text-transform: uppercase;\n        outline: none;\n    }\n\n\n    label {\n        margin-left:0;\n    }\n\n    .row {\n        display: grid;\n        grid-template-columns: 1fr auto;\n        column-gap: 21px;\n        align-items: top;\n    }\n\n    .smaller {\n        opacity: 0.5;\n        font-size: 80%;\n        letter-spacing: 0.05em;\n    }\n\n    .errors {\n        color: red;\n    }\n\n</style>\n\n\n<div>\n\n  <form class=\"row\" on:submit|preventDefault={getSchema}>\n        <div>\n            <input class=\"text\" type=\"text\" placeholder=\"https://yoursite.com/graphql\" bind:this={urlElement} value={url} />\n            <div>\n                <input type=\"checkbox\" id=\"sss5678\" title=\"include credentials to requests\" bind:this={credentialsElement}>\n                <label for=\"sss5678\" class=\"smaller\">Include credentials</label>\n            </div>\n            <div class=\"errors\" bind:this={errorsElement}></div>\n        </div>\n        <input type=\"submit\" id='subm444' bind:this={submitElement} class=\"button\" value=\"&#x21bb; reload schema\" />\n  </form>\n\n  {#if Object.entries(scheme).length != 0 }\n        <a href on:click|preventDefault={ e => {visible = ! visible} } >{visible?'Hide':'Show'} scheme</a><br><br>\n  {/if}\n  \n  {#if visible}\n        <JsonView json={scheme} />\n  {/if}\n\n</div>\n",
    "<script>\n\nimport Js from './JsonView.svelte'\nimport TypeField from './TypeField.svelte'\n\n\n// P R O P S\nexport let parentid = ''\nexport let scheme = {}\nexport let typeName = ''\nexport let showCheckbox = true\n\nexport let level = 0\nexport let padding = '  '\n\nexport let getText = function () {\n    let a =[]\n    // let p = '  '\n\n    for (let key in fieldFunctions) {\n        let v = fieldFunctions[key]()\n        if (v) a.push( padding.repeat(level+1) + v )\n    }\n\n    if (a.length > 0) \n        // return '\\n'+ padding.repeat(level)+'{\\n' +a.join('\\n') + '\\n'+ padding.repeat(level) +'}'\n        return ' {\\n' +a.join('\\n') + '\\n'+ padding.repeat(level) +'}'\n    \n    return ''\n}\n\nlet fieldFunctions = {}\nlet node = getNode(scheme, typeName)\nlet vis = false\n\n\n\nfunction getNode(scheme, typeName){\n    if (scheme && scheme.data && scheme.data.__schema){\n        let nodes = scheme.data.__schema.types.filter(t =>  t.name == typeName )\n        if (nodes.length > 0) {\n            return nodes[0]\n        }\n        return null\n    } \n    return null\n}\n\n\n</script>\n\n<style>\n\n    .self{ \n        display: inline;\n        vertical-align: top;\n        margin-left:10px;\n    }\n    .description {\n        color: slategray;\n        margin-bottom: 10px;\n    }\n    .fieldlist {\n        margin-bottom: 10px;\n    }\n    .opened {\n        min-width: 65px;\n        display: inline-block;\n    }\n    .closed {\n        min-width: 65px;\n        display: inline-block;\n    }\n    .closed::before {\n        content: '\\25B6';\n        font-size: 70%;\n        width:15px;\n        display: inline-block;\n    }\n\n    .opened::before {\n        content: '\\25BC';\n        font-size: 70%;\n        width:15px;\n        display: inline-block;\n    }\n\n    .scalar-type {\n        display: inline-block;\n        margin-left:15px;\n        color:steelblue;\n        min-width: 50px;\n    }\n    .list-type {\n        display: inline-block;\n        margin-left:15px;\n        color:blue;\n        min-width: 50px;\n    }\n\n    .frame {\n        /* border-left: 1px dotted slategray; */\n        /* border-bottom: 1px dotted slategray; */\n        border: 1px dotted slategray;\n        padding:5px;\n        padding-left:2px;\n        margin-left: 8px;\n        padding-top:0.5em;\n        max-width: max-content;\n    }\n\n</style>\n\n\n{#if node}\n<div class=\"self\">\n    {#if node.kind==\"SCALAR\"}\n         <span class=\"scalar-type\">{typeName}</span>\n    {:else}\n        <a class={vis?'opened':'closed'} href on:click|preventDefault={ e => vis = !vis }>{typeName}</a>\n            <div class=\"frame\" style=\"display:{vis?'block':'none'}\">\n                <span class=\"description\">{node.description}</span>\n                {#if node.fields}\n                    <div class=\"fieldlist\">\n                    {#each node.fields as f,ind}\n                        <TypeField {showCheckbox} {scheme}  level={level+1}  {padding}  node={f} parentid=\"{parentid}-{typeName}\" bind:getText={fieldFunctions[f.name]}  on:change />\n                    {/each}\n                    </div>\n                {/if}\n            </div>\n    {/if}\n</div>\n{/if}",
    "\n<script>\nimport { onMount } from 'svelte'\n\nimport Js from './JsonView.svelte'\nimport Argument from './Argument.svelte'\nimport Type from './Type.svelte'\nimport { changeCount } from './stores.js'\n\n\n\n// P R O P S\nexport let urlElement\nexport let credentialsElement\n\nexport let parentid = ''\nexport let scheme = {}\nexport let node = {}\nexport let operation = \"\"\nexport let test = submitForm\n\n\nlet testResult =''\nlet evalErrors =''\nlet vis = false\nlet request \nlet response = null\n\nlet responseArea\n\nlet evalTextarea\nlet evalCodeMirror\nlet variablesTextarea\nlet variablesCodeMirror\nlet queryTextarea\nlet queryCodeMirror\n\n\nlet queryFrame\nlet variablesFrame\nlet evalFrame\n\nlet form\nlet attachFileCheckbox\nlet attachFileCheckboxChecked = false\nlet formArea\n\n\nlet getTypeText\nlet getArgFunctions ={}\n\n\n$: {\n    let dummy = node\n    console.log(\"node changed -------------\")\n    // generateQuery(node)\n    \n}\n\n\nfunction getArgsText() {\n    let args = []\n    for (let [key,f] of Object.entries(getArgFunctions)) {\n        let text = f()\n        if (text) args.push(text)\n    }\n    let argsText = args.length == 0? '' : `(\\n${ args.join(',\\n') }\\n)`\n    return argsText\n}\n\n\n\nfunction generateQuery(el){\n    console.log(\"generateQuery:\", el)\n    let arglist = getArgsText()\n    let fieldlist =getTypeText ? getTypeText() : ''\n    request = `${operation} {\\n${node.name}${arglist}${fieldlist}\\n}`\n    if (queryCodeMirror){\n        queryCodeMirror.getDoc().setValue(request)\n    }\n    incChangeCounter()\n}\n\n\nfunction fixEmptyVariablesField() {\n    let str = variablesTextarea.value\n    if (!str || !str.trim()){\n        console.log(\"Fixing empty variable field\")\n        variablesCodeMirror.setValue(\"{}\")\n    }\n\n}\n\n\nfunction submitForm(event){\n    if (event) event.preventDefault()\n    console.log(\"submitForm credentialsElement=\",credentialsElement.checked,\" urlElement.value=\", urlElement.value)\n    response = null\n    responseArea.innerHTML = \"\"\n\n    fixEmptyVariablesField()\n\n    if (attachFileCheckbox.checked) {\n        submitFormMultipart()\n    } else {\n        submitFormInJSON()\n    }\n\n    return false\n}\n\n\nfunction onFormSubmitSuccess(res){\n    response = res\n    window.$(responseArea).jsonViewer(res, {collapsed: true, rootCollapsable: false})\n    evaluate()\n}\n\n\nfunction submitFormMultipart(){\n    window.$(form).ajaxSubmit({\n        url: urlElement.value, \n        type: 'POST',\n        xhrFields : { withCredentials: credentialsElement.checked} ,\n        success: onFormSubmitSuccess,\n        error: err => {\n                console.log(\"-------------------\")\n                window.$(responseArea).jsonViewer( JSON.parse(JSON.stringify(err)), {collapsed: true, rootCollapsable: false})\n            }\n    })\n}\n\n\nasync function submitFormInJSON() {\n    try {\n        let fetchOptions = {\n            headers: {\n                'Accept': 'application/json, text/plain, */*',\n                'Content-Type': 'application/json'\n            },\n            method: \"POST\",  \n            body: JSON.stringify({ query: queryTextarea.value, variables: variablesTextarea.value, operationName: null }) \n        }\n        if (credentialsElement.checked){\n            fetchOptions.credentials = 'include' \n        }\n        let resp = await fetch( urlElement.value, fetchOptions )\n        let res = await resp.json()\n        onFormSubmitSuccess(res)\n    } catch (err) {\n        console.error(\"Submit form error --------------------------------\\n\", err)\n        responseArea.innerText = String(err)\n    }\n}\n\n\nfunction evaluate(){\n    testResult = \"\"\n    evalErrors = \"\"\n    let code = evalTextarea.value\n    code = code.trimStart()\n    code = code.trimEnd()\n    if (code == \"\") {\n        evalErrors = `<br>// Write code to evaluate server response.<br>// For example:<br>response.errors == null`\n        return\n    }\n\n    try {\n        let result = eval(code)\n        testResult = result        \n    } catch (error) {\n        console.log(error)\n        evalErrors = error\n    }\n}\n\n\nfunction incChangeCounter(a) {\n    console.log('incChangeCounter', $changeCount, a)\n    $changeCount +=1\n}\n\n\nfunction onCodeMirrorChange(cm) {\n    var txt = cm.getDoc().getValue()\n    var textarea = cm.getTextArea()\n    textarea.value = txt\n}\n\n\nlet jsOptions =  {\n    mode:  \"javascript\",\n    extraKeys: {'Ctrl-Space':'autocomplete'},\n    autoRefresh:true,\n    autoCloseBrackets: true,\n    matchBrackets: true,\n    tabSize:2,\n    theme: \"eclipse\",\n}\n\n\nfunction addCodeMirrors() {\n    if (! evalCodeMirror) { \n        evalCodeMirror = CodeMirror.fromTextArea( evalTextarea, jsOptions )\n        evalCodeMirror.on('blur', incChangeCounter)\n        evalCodeMirror.on('change', onCodeMirrorChange)\n    }\n\n    if (! variablesCodeMirror) { \n        variablesCodeMirror = CodeMirror.fromTextArea( variablesTextarea, jsOptions )\n        variablesCodeMirror.on('blur', incChangeCounter)\n        variablesCodeMirror.on('change', onCodeMirrorChange)\n    }\n\n    if (! queryCodeMirror) { \n        queryCodeMirror = CodeMirror.fromTextArea( queryTextarea, jsOptions)\n        queryCodeMirror.on('blur', incChangeCounter)\n        queryCodeMirror.on('change', onCodeMirrorChange)\n    }\n}\n\n\nfunction removeCodeMirrors(params) {\n    if ( evalCodeMirror) {\n        evalCodeMirror.off('blur', incChangeCounter)\n        evalCodeMirror.off('change', onCodeMirrorChange)\n        evalCodeMirror.toTextArea()\n        evalCodeMirror = null\n    }\n\n    if ( variablesCodeMirror) {\n        variablesCodeMirror.off('blur', incChangeCounter)\n        variablesCodeMirror.off('change', onCodeMirrorChange)\n        variablesCodeMirror.toTextArea()\n        variablesCodeMirror = null;\n    }\n\n    if ( queryCodeMirror) {\n        queryCodeMirror.off('blur', incChangeCounter)\n        queryCodeMirror.off('change', onCodeMirrorChange)\n        queryCodeMirror.toTextArea()\n        queryCodeMirror = null\n    }\n}\n\n\nfunction toggleVisibility(event) {\n    if (event) event.preventDefault()\n    vis = !vis\n    if (vis) {\n        addCodeMirrors()\n    } else {\n        removeCodeMirrors()\n    }\n}\n\n\nonMount(async () => {\n    window.$(formArea).resizable({ handles: \"e\" });\n    window.$(form).resizable({ handles: \"e\" });\n    window.$(queryFrame).resizable({ handles: \"s\" });\n    window.$(variablesFrame).resizable({ handles: \"s\" });\n    window.$(evalFrame).resizable({ handles: \"s\" });\n    console.log(\"on mount ----------------------------------------------\")\n    generateQuery(node)\n})\n\n</script>\n\n<style>\n    .header {\n        font-family: 'Roboto','Roboto Condensed';\n        font-weight: bold;\n        font-size: 90%;\n        letter-spacing: 0.1em;\n        padding: 1em 0 0 10px;\n        background-color: whitesmoke;\n        padding-bottom: 5px;\n    }\n\n    .root {\n        margin-top: 10px;\n        margin-bottom: 10px;\n        display: grid;\n        grid-template-columns: 1fr max-content 4fr;\n\n        border: 1px solid steelblue;\n    }\n\n    .form-area { \n        border-right: 1px solid steelblue;\n        min-width:380px;\n    }\n\n    .form-area h3 {\n        background-color: whitesmoke;\n        margin: 0;\n        padding:10px 0 0 10px;\n        color: silver;\n        font-size:1.5em;\n    }\n\n    .name { \n        display: inline-block;\n        min-width: 200px;\n    }\n\n    .description {\n        display: inline-block;\n        color: slategray;\n        font-weight: normal;\n        /* vertical-align: bottom; */\n    }\n\n    .fieldlist {\n        border-bottom:1px solid silver;\n        padding-bottom: 10px;\n    }\n\n    .closed::before {\n        content: '\\25B6';\n        font-size: 90%;\n        width:15px;\n        display: inline-block;\n    }\n\n    .opened::before {\n        content: '\\25BC';\n        font-size: 90%;\n        width:15px;\n        display: inline-block;\n    }\n\n    .buttons {\n        text-align: right;\n        padding: 10px;\n    }\n    .buttons2 {\n        text-align: left;\n        padding: 10px;\n    }\n\n\n\n    .margined {\n        margin:10px\n    }\n\n    .response {\n        overflow:auto;\n        background-color: white;\n        font-family: 'Roboto', 'Roboto Mono', monospace;\n        padding: 0;\n    }\n\n    .queryFrame {\n        height: 20em;\n        min-height: 1em;\n        border-top:1px solid silver;\n        border-bottom:1px solid steelblue;\n    }\n\n    .queryFrame>textarea {\n        /* resize: vertical; */\n        width: calc(100% - 20px);\n        height: calc(100% - 21px);\n        border-width: 0;\n    }\n\n    .variablesFrame {\n        height: 3em;\n        min-height: 1em;\n        border-top:1px solid silver;\n        border-bottom:1px solid steelblue;\n    }\n\n    .variablesFrame>textarea {\n        /* resize: vertical; */\n        width: calc(100% - 20px);\n        height: calc(100% - 21px);\n        border-width: 0;\n    }\n\n    .evalFrame {\n        height: 8em;\n        min-height: 1em;\n        border-top:1px solid silver;\n        border-bottom:1px solid steelblue;\n    }\n\n    .evalFrame>textarea {\n        /* resize: vertical; */\n        width: calc(100% - 20px);\n        height: calc(100% - 21px);\n        border-width: 0;\n    }\n\n\n    .test-result {\n        min-width: 60px;\n        display: inline-block;\n    }\n\n    .result-panel {\n        border-left-width: 0;\n    }\n\n    .response-area {\n        padding: 10px;\n    }\n\n\n    .eval-result {\n        font-weight: normal;\n    }\n\n    .eval-errors {\n        color: red;\n        font-size: 90%\n    }\n\n    .button {\n        color: #E10098; \n        background-color: transparent;\n        border: 1px solid #E10098;\n        padding: 5px 15px 5px 15px;\n        border-radius: 4px;\n        height: 32px;\n\n        font-family: 'Roboto Condensed';\n        font-size: 13px;\n        font-weight: bold;\n        \n        letter-spacing: 0.1em;\n        text-transform: uppercase;\n    }\n\n    .button-opaque{\n       background-color: #E10098;\n       color: white;\n    }\n\n\n    form {\n        border-right: 1px solid steelblue;\n        background-color: whitesmoke;\n    }\n\n    textarea {\n        padding: 10px;\n        font-size: 14px;\n        font-family: 'Roboto Mono','Roboto', monospace;\n        color: darkmagenta;\n    }\n\n    .json-toggle {\n        color: darkmagenta !important;\n    }\n    \n    .outer {\n        margin: 0 3% 0 3%;\n    }\n\n    .shadow {\n\n        -webkit-box-shadow: 0px 12px 16px 0px rgba(0,0,0,0.10);\n        -moz-box-shadow: 0px 12px 16px 0px rgba(0,0,0,0.10);\n        box-shadow: 0px 12px 16px 0px rgba(0,0,0,0.10);    \n\n    }\n     \n</style>\n\n<div >\n    <div class=\"outer\">\n        <a class=\"name {vis?'opened':'closed'}\" href on:click|preventDefault={ toggleVisibility }>{node.name}(...)</a>\n        <span class=\"test-result\">{@html testResult}</span> \n        <span class=\"description\">{node.description}</span>\n    </div>\n    <div class=\"root shadow\" style=\"display:{vis?'grid':'none'}\">\n        <!-- <h3>{node.name}(...)</h3> -->\n        <!-- <div></div> -->\n        <!-- <div></div> -->\n        <div class=\"form-area\" bind:this={formArea}>\n\n                {#if node.args}\n                <h3>{node.name}(...)</h3>\n                <div class=\"header\" >ARGUMENTS</div>\n                <div class=\"fieldlist\" >\n                    {#each node.args as arg (arg.name)}\n                    <Argument node={arg} bind:getText={getArgFunctions[arg.name]} on:change={generateQuery} parentid=\"{parentid}-{node.name}-argument\"/>\n                    {/each}\n                </div>\n                {/if}\n            \n                \n                <div>\n                    <div class=\"header\" >RETURN {node.type.kind == \"LIST\" ? '[...]': ''}\n                    </div>\n                    <Type typeName={node.type.name || node.type.ofType.name} scheme={scheme} parentid=\"{parentid}-{node.name}\" level={1}  bind:getText={getTypeText} on:change={generateQuery}/>\n                </div>\n\n        </div>\n\n        <form bind:this={form} on:submit={submitForm}>\n            <div>\n                <div class=\"header\" >QUERY</div>\n                <div class=\"queryFrame\" bind:this={queryFrame}>\n                    <textarea id=\"{parentid}-{node.name}-query\" name=\"query\" bind:this={queryTextarea} on:change={incChangeCounter} >{request}</textarea>\n                </div>\n            </div>\n            <div>\n                <div class=\"header\" >VARIABLES</div>\n                <div class=\"variablesFrame\" bind:this={variablesFrame}>\n                    <textarea id=\"{parentid}-{node.name}-variables\" name=\"variables\" bind:this={variablesTextarea} on:change={incChangeCounter}>{'{'}{'}'}</textarea>\n                </div>\n            </div>\n            <div class=\"buttons\">\n                <input type=\"submit\" class=\"button \"  value=\"query & run test\">\n            </div>\n            <div>\n                <div class=\"margined\">\n                    <input bind:this={attachFileCheckbox} type=\"checkbox\" style=\"vertical-align:top\"\n                    on:change={e => attachFileCheckboxChecked = attachFileCheckbox && attachFileCheckbox.checked ? true: false}>\n                    <span class=\"description\">\n                        <span style=\"font-weight:bold; color:black\">Attach file.</span>\n                        Sets Content-Type to\n                        <br>application/x-www-form-urlencoded\n                    </span>\n                </div>\n                <div class=\"margined\" >\n                    {#if attachFileCheckboxChecked}\n                    <!-- <input id=\"{parentid}-{node.name}-input-file-namer\" type=\"text\" on:change={onInputFileNameChange} style=\"width:70px;\" value=\"input-file\"> -->\n                    <span>name=\"file\"</span><br>\n                    <input type=\"file\" name=\"file\">\n                    {/if}\n                </div>\n            </div>\n        </form> \n\n\n        <div class=\"result-panel\">\n            <div class=\"header\">RESPONSE\n            </div>\n            <div class=\"response-area\">\n                <span class=\"json-literal\">{response?'':null}</span>\n                <div class=\"response\" bind:this={responseArea}></div>\n            </div>\n            <div>\n                <div class=\"header\">\n                    <span class=\"description\">Response saved in variable 'response'</span>\n                    <br><span>DEFINE TEST & </span>\n                    <input type=\"button\" class=\"button\" value=\"run test &#x25B6\" on:click={evaluate}>\n                </div>\n                <div class=\"evalFrame\" bind:this={evalFrame}>\n                    <textarea id=\"{parentid}-{node.name}-eval-text\" bind:this={evalTextarea} on:change={incChangeCounter}>response && !response.errors</textarea> \n                </div>\n                <div class=\"buttons2\">\n                    <!-- <input type=\"button\" class=\"button\" value=\"try test\" on:click={evaluate}> -->\n                    <span class=\"eval-result\">{@html testResult}</span>\n                    <span class=\"eval-errors\">{@html evalErrors}</span>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>",
    "<script>\nimport Type from './Type.svelte'\n\nexport let parentid = ''\nexport let scheme\nexport let node\nexport let showCheckbox = true\n\nexport let level = 0\nexport let padding = '  '\n\nexport let getText = function(e){\n    if (! checkboxElement) return ''\n    if (checkboxElement.checked == false) return ''\n    let value = fieldName + getTypeText()\n    return value\n}\n\n\nlet fieldName = node.name\nlet typeName = node.type.kind == \"LIST\" ? node.type.ofType.name : node.type.name\nlet getTypeText\nlet checkboxElement\n\n</script>\n\n<style>\n    .disabled>*>* {\n        opacity: 0.5 !important;\n    }\n\n    .field-name { \n        display: inline-block;\n        min-width: 120px;\n    }\n\n    .field-description {\n        color: slategray;\n        margin-bottom: 10px;\n        font-size: 80%\n    }\n\n    .field {\n        margin-left: 30px;\n    }\n</style>\n\n\n<div class=\"field\">  \n    {#if showCheckbox}\n        <input type=\"checkbox\" checked id=\"{parentid}-{fieldName}\" bind:this={checkboxElement}  on:change>\n    {/if}\n    <span class=\"field-name\">{fieldName}</span>\n    <Type scheme={scheme} typeName={typeName} {showCheckbox} {level} {padding} bind:getText={getTypeText}  parentid=\"{parentid}-{fieldName}-type\"  on:change/> \n    <br><span class=\"field-description\">{node.description}</span> \n</div>\n",
    "<script>\nimport { onMount } from 'svelte'\n\n// P R O P S\nexport let parentid = ''\nexport let node = {}\nexport let getText = function() {\n    if (!checkboxElement.checked) return ''\n    let value = inputElement.value\n    // if (inputType == 'text' && graphqlType == 'String'){\n    if (graphqlType == 'String'){\n      value = `\"${value.replace(/\"/g,'\\\\\"')}\"` \n    }\n   return `${node.name}: ${value}`\n}\n\n// if (node.checked === undefined)     node.checked = true\n// if (node.graphqlType === undefined) node.graphqlType = node.type.name || node.type.ofType.name\n// if (node.value === undefined)       node.value = node.defaultValue ||  (node.graphqlType=='Int'? 0 : node.name.replace(/_/g,' '))\n\nlet checked = true\nlet graphqlType = node.type.name || node.type.ofType.name\nlet value\nif (node.defaultValue){\n    value = graphqlType == \"String\" ? node.defaultValue.replace(/\"/g,'') : node.defaultValue\n}else {\n    value = (graphqlType=='Int'? 0 :  graphqlType=='Boolean'? false : graphqlType=='String'? node.name.replace(/_/g,' '): null )\n}\n\n\nlet checkboxElement\nlet inputElement\nlet inputType = graphqlType=='Int'?'number':'text'\n\n\n\nonMount(async () => {\n    inputElement.setAttribute('type', inputType)\n})\n\n\n</script>\n\n<style>\n    .field {\n        margin-left: 10px;\n        margin-top: 0.5em;\n    }\n\n    .description {\n        color: slategray;\n        font-size: 90%;\n    }\n\n    .argname { \n        display: inline-block;\n        min-width: 130px;\n    }\n\n    .oftype { \n        display: inline-block;\n        min-width: 50px;\n        color: steelblue;\n        font-size: 90%;\n\n    }\n\n    .disabled {\n        color: silver;\n    }\n\n    .exclamation {\n        font-weight: bold;\n        color: red;\n    }\n\n    .input {\n        width: 130px;\n    }\n\n    input {\n        font-size: inherit;\n        border: 1px solid slategray;\n\n    }\n\n    input:disabled {\n    color: silver;\n    background-color: whitesmoke;\n    border: 1px solid silver;\n}\n\n\n\n</style>\n\n<!-- <svelte:options accessors={true}/> -->\n\n<div class=\"field\" >  \n    <input id=\"{parentid}-{node.name}-checkbox\" type=\"checkbox\" bind:this={checkboxElement} bind:checked={checked} disabled={node.type.kind=='NON_NULL'}  on:change> \n    <span class=\"argname {checked?'':'disabled'}\">{node.name}</span>\n    <input id=\"{parentid}-{node.name}-input\" class=\"input\"  name={node.name} disabled={!checked} bind:value=\"{value}\" bind:this={inputElement} placeholder={value==''?'':null} on:change>\n    <span class=\"oftype {checked?'':'disabled'}\">{graphqlType}\n    <span class=\"exclamation\">{node.type.kind=='NON_NULL'?' !':''}</span>\n    </span> \n    \n    <br><span class=\"description {checked?'':'disabled'}\">{node.description}</span>\n</div>\n "
  ],
  "names": [],
  "mappings": "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"
}